package ex02_class;
/*
 * 클래스 - 객체지향프로그래밍
 * 객체를 지향하는 프로그래밍 방법
 * 객체란 우리 실생활에 존재하는 모든것으로 생각할수 있다
 * 객체를 상태를 표현할수 있고, 행동을 정의할 수 있다.
 * 객체를 중심으로 프로그램 구조를 설계하고 프로그래밍 하는것을 개체지향 프로그래밍이라고 한다
 * 
 * 클래스 - 객체를 생성하기 위한 설명서
 * 물건을 만들기 위한 메뉴얼
 * 클래스를 기반으로 객체를 생성한다
 * 하나의 클래스로 여러개의 객체를 만드는것이 가능하다
 * 
 * 클래스의 선언
 * 접근제한자 class 클래스명{
 * 
 * }
 * 접근제한자 : 해당 클래스의 접근 범위를 제한하는 키워드
 * class : 클래스를 선언함을 뜻함
 * 클래스명 : 변수처럼 이름을 가지고, 객체를 생성할때 사용함
 * 
 * 클래스의 종류
 * 1.실행용 클래스
 * -프로그램 전체에서 단 하나의 클래스로 프로그램의 실행을 맡음
 * main 메서드를 갖고 있으며, 다른 클래스에서 사용되지 않음
 * 
 * 2.객체 생성용 클래스
 * -다른클래스에서 사용할 목적으로 선언되는 클래스
 * 
 * 클래스 이름을 작성하는 규칙
 * -클래스의 첫글자는 대문자를 사용
 * -숫자를 사용할수 있으나 첫글자로는 사용할수 없음
 * -특수 문자는 $_만 사용 가능
 * 자바 예약어 사용할 수 없음
 */
class A{
	
} //프로그램을 실행했을때 코드를 컴파일한 결과물은 코드파일을 각각 작성한것과 동일하게 각 class별로 도출되어 2개가 됨
//파일 분리 여부와 관계없이 결과물이 같기 때문에 개발자가 정함
//그러나 유지보수의 편리성과 재사용을 고래혀 한개의 클래스로 작성

public class Ex01_class {
	public static void main(String[] args) {
		//객체 변수의 선언
		//클래스면 변수명;
		Cat c;
		
		//만들어진 객체 변수 객체를 만들어 대입함
		c = new Cat();
		Cat c2 = new Cat();
		
		//자동차 객체 생성
		Car car = new Car();
		
		//변수명.필드명
		//변수명 : 클래스를 이용해 만든 객체의 이름
		//필드명 : 만든 객체가 가지고 있는 필드의 이름
		
		System.out.println("car의 바퀴수 : " + car.wheel);
		
		car.wheel = 4;
		System.out.println("car의 바퀴수 : " + car.wheel);
		
		Car car2 = new Car();
		System.out.println("car2의 바퀴수 : " + car2.wheel);
		
		//메서드의 사용 - 필드의 사용법과 동일. 메서드를 선언한 클래스 안에서는 단순히 메서드명만 호출하면 됨
		// 객체를 생성한 후 참조변수를 이용해 그 객체의 메서드를 사용해야함
		//변수명.메서드명(); 생성한 객체의 메서드 호출
		
		car.ride();
		
		//함수의 작동 원리 - 메서드를 호출하면 흐름이 선언된 쪽으로 간다
		//내부에 있는 코드들이 순차적으로 실행되고 경우에 따라 실행한 결과를 호출한곳으로 돌려준다
		//값을 돌려주는 것을 '반환한다'라고 표현하고, 반환하는 결과값을 '반환값'이라고 함
		//반환값이 있는경우 반환하는 데이터타입을 반환형에 명시
		//int boolean등 기본자료형과 String 같은 참조자료형도 가능하지만 사용자가 만든 객체로도 가능
		//아무것도 반환하지 않을시 void
		
		//메서드의 이름짓기
		//기능을 명확하게 설명해줄수 있는 이름이 좋다
		//메서드 명을 작성하는 규칙은 변수를 작성하는 규칙과 동일
		
	}
}
