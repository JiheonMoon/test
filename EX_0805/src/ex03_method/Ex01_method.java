package ex03_method;

public class Ex01_method {
	public static void main(String[] args) {
		/*
		 * 메서드 사용의 이점
		 * 메서드를 구현함으로써 같은 내용의 코드를 반복적으로 사용하는 것을 피할수 있음
		 * 필요할때마다 재사용
		 * 코드의 집할을 따로 분리하는것을 "모듈화"
		 * 모듈화를 하면 코드를 읽을때 가독성이 좋아지며 더욱빠르고 쉽게 수정가능
		 * 
		 * 접근제한자 반환형 메서드명(){
		 * 		기능을 수행하는 코드
		 * }
		 * 접근 제한자 - 클래스/메서드/필드에 대한 접근을 어느범위까지 제한하느냐에 대한 키워드
		 * 1.public - 모든 접근을 허용. 같은 프로젝트 내의 모든 객체들이 이용가능
		 * 2.private - 현재 클래스 내에서만 사용
		 * 3.protected - 상속 관계의 객체들에서만
		 * 4.default - 같은 패키지 내의 객체에서만
		 * 반환형(return Type) - 메서드를 호출하면 블록안에 있는 코드를 실행한 후 결과값을 반환한다
		 * 이때 어떤타입으로 반환할지 미리 정해주는것
		 * 반환값이 없는 경우 void 사용
		 * 
		 * 메서드명 - 메서드의 이름. 첫글자는 소문자로 시작
		 * 메서드를 호출할때 사용
		 * 
		 * 매개변수(파라미터)
		 * 특정기능을 수행하기 위한 메서드는 기능을 수행할때 필요한 값을 전달받을수 있다.
		 * 매개변수는 사용할 값을 받는 변수이다.
		 * 접근제한자 반환형 메서드명(자료형 변수명,자료형 변수명){
		 * 		기능을 수행할 코드
		 * }
		 * 
		 * return - 메서드에서 모든 작업을 마치고 경우에 따라 결과를 호출한곳으로 돌려주기도 하는데 이를 반환한다라고 표현
		 * 반환하는 결과값을 반환값이라고 함
		 * 반환값이 있는 경우 반환할 데이터의 타입에 따라 반환형에 명시해줘야함
		 * 반환값이 없는 경우 메서드를 종료하기 위해 return을 사용할수 있음
		 * 
		 * 매개변수와 마찬가지로 리턴값의 자료형은 제한이 없음
		 * 자바에서 사용하는 모든 자료형을 반환타입으로 사용가능
		 */
		
		//메서드의 호출은 반드시 메서드 안에서
		printHello();
	}
	//메서드는 반드시 메서드 밖에서 정의
	static void printHello() {
		System.out.println("안녕하세요");
		System.out.println("반갑습니다");
	}
}
