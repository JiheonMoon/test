package ex05_lambda;
/*
 * 람다식
 * JDK 1.8부터 함수형 프로그래밍 '람다식(lambda expression)'을 지원함
 * 람다식은 이름이 없는 익명함수를 만들기 위한 표현식을 말함
 * 자바는 객체를 기반으로 프로그램을 구현하는 객체지향 프로그램
 * 클래스를 먼저 생성하고, 클래스 안에 메서드와 객체를 선언해 사용해야 함
 * 하지만 함수형 프로그래밍은 객체지향 프로그램과 달리 함수만을 구현하고 실행할수 있는 개발방식
 * 
 * 람다식이 도입된 이유
 * 함수형 프로그래밍 방식
 * 자바에서는 함수형 프로그래밍 방식이 적용되지 않았음
 * 자바는 클래스에 함수를 정의하고 객체를 통해 호출하는 방식을 사용하고 있음
 * 
 * 람다식 문법
 * 기존의 자바 문법과는 달라서 객체지향 프로그래밍에 익숙한 개발자들은 다소 생소할수 있다
 * 하지만 문법이 간결해지고, 원하는 결과를 쉽게 집계할 수 있어 익숙해지면 큰 장점이 있음
 * 
 * int add(int x,int y){
 * 		return x + y;
 * }
 * 
 * 위 함수를 람다식으로 표현하기
 * (x, y) -> {return x + y;}
 * 
 * 메서드의 이름과 반환형을 제거하고 화살표를 이용해 구현
 * 
 * 소괄호 생략하기
 * 람다식 문법에서는 파라미터의 자료형을 생략할 수 있다
 * 파라미터가 한개인 경우 소괄호도 생략할 수 있다.
 * 
 * (String str) -> {System.out.println(str);}
 * (str) -> {System.out.println(str);}
 * str -> {System.out.println(str);}
 * 
 * 중괄호 생략하기
 * 함수의 반환형이 void라면 중괄호도 생략가능
 * str -> System.out.println(str);
 * 
 * 반환형이 있을때 return만 있을겅우 return 키워드와 중괄호를 같이 생략가능
 * (x, y) -> x + y
 * 
 * 함수형 인터페이스
 * 객체지향 프로그램에서 인터페이스를 사용하기 위해서는 구현체를 만든 뒤 사용해야 한다
 * 람다식은 위와 같은 과정을 생략할 수 있다.
 * 단, 람다식을 이용해 인터페이스를 사용할 경우, 인터페이스 안에는 하나의 추상메서드만 작성할 수 있음.
 * 람다식을 구현하기 위해서는 먼저 인터페이스를 만들고, 인터페이스에 람다식으로 구현을 메서드를 선언해야한다.
 * 오직 하나의 추상 메서드가 선언된 인터페이스만이 람다식의 타겟이 되는데
 * 이를 함수형 인터페이스라고 한다.
 */

@FunctionalInterface //인터페이스에 추상메서드가 무조건 1개 있어야 오류가 나지 않음
public interface Calculator {
	int plus(int num1, int num2);
	//int minus(int num1, int num2);
}
