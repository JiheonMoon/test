/*USER
U_ID(PK)	VARCHAR2(100)	
U_PW	VARCHAR2(100)	
U_NAME	VARCHAR2(200)	
U_ADDRESS VARCHAR2(300)	
U_EMAIL	VARCHAR2(300)		
U_BIRTH DATE	

ORDER			
O_NUM(PK)	NUMBER	
O_DATE	DATE	
U_ID(FK)	VARCHAR(100)	
P_NUM(FK) NUMBER
	

PRODUCT	
P_NUM(PK) NUMBER
P_NAME	VARCHAR2(100)
P_PRICE	NUMBER
P_COUNT NUMBER*/

CREATE TABLE "USER"(
	U_ID VARCHAR2(100) PRIMARY KEY,
	U_PW VARCHAR2(100),
	U_NAME VARCHAR2(200),
	U_ADDRESS VARCHAR2(300),
	U_EMAIL VARCHAR2(300),
	U_BIRTH DATE
);

--코드 수정한다고 다시 적용되지 않음
--1. 테이블 날리고 다시 만들던지
--2. 테이블 생성후 제약 조건 추가
CREATE TABLE "ORDER"(
	O_NUM NUMBER PRIMARY KEY,
	O_DATE DATE,
	U_ID VARCHAR(100),
	P_NUM NUMBER,
	CONSTRAINT UID_FK FOREIGN KEY(U_ID) REFERENCES "USER"(U_ID),
	CONSTRAINT PNUM_FK FOREIGN KEY(P_NUM) REFERENCES PRODUCT(P_NUM)
);

DROP TABLE "ORDER";

CREATE TABLE PRODUCT(
	P_NUM NUMBER PRIMARY KEY,
	P_NAME VARCHAR2(100),
	P_PRICE NUMBER,
	P_COUNT NUMBER
);

CREATE TABLE FLOWER(
	F_NAME VARCHAR(100) PRIMARY KEY,
	F_COLOR VARCHAR(100),
	F_PRICE NUMBER
);

CREATE TABLE VASE(
	V_NUM NUMBER PRIMARY KEY,
	V_COLOR VARCHAR(100),
	V_SHAPE VARCHAR(100),
	F_NAME VARCHAR(100),
	CONSTRAINT FLOWER_PK FOREIGN KEY(F_NAME) REFERENCES FLOWER(F_NAME) 
);

CREATE TABLE CD(
	CD_TITLE VARCHAR(200) PRIMARY KEY,
	CD_PRICE NUMBER,
	CD_GENRE VARCHAR(100),
	CD_TRACKLIST VARCHAR(300),
	A_NAME VARCHAR(200),
	CONSTRAINT ARTIST_FK FOREIGN KEY(A_NAME) REFERENCES ARTIST(A_NAME)
);

CREATE TABLE ARTIST(
	A_NAME VARCHAR(200) PRIMARY KEY,
	A_NATION VARCHAR(100),
	A_YEAR DATE
);

CREATE TABLE TRACK(
	TRACK_TITLE VARCHAR(200) PRIMARY KEY,
	TRACK_TIME TIMESTAMP,
	CD_TITLE VARCHAR(200),
	CONSTRAINT CD_FK FOREIGN KEY(CD_TITLE) REFERENCES CD(CD_TITLE)
);

CREATE TABLE DEPARTMENT(
	D_ID NUMBER PRIMARY KEY,
	D_NAME VARCHAR(200)
);

CREATE TABLE EMPLOYEE(
	EMPL_ID NUMBER PRIMARY KEY,
	EMPL_NAME VARCHAR(200),
	EMPL_POS VARCHAR(200),
	D_ID NUMBER,
	CONSTRAINT D_FK FOREIGN KEY(D_ID) REFERENCES DEPARTMENT(D_ID)
);

CREATE TABLE FAMILY(
	F_NAME VARCHAR(200),
	F_AGE NUMBER,
	EMPL_ID NUMBER,
	CONSTRAINT EMPL_FK FOREIGN KEY(EMPL_ID) REFERENCES EMPLOYEE(EMPL_ID)
);

CREATE TABLE WORKRECORD(
	W_PERIOD DATE,
	W_POSITION VARCHAR(200),
	EMPL_ID NUMBER,
	CONSTRAINT EMPL_FK2 FOREIGN KEY(EMPL_ID) REFERENCES EMPLOYEE(EMPL_ID)
);

SELECT EMPLOYEE_ID, FIRST_NAME FROM EMPLOYEES;

SELECT * FROM COLS WHERE TABLE_NAME = 'EMPLOYEES';

--사원 테이블에서 모든 정보를 조회하세요
SELECT * FROM EMPLOYEES;

--DEPARTMENTS(부서) 테이블의 모든 정보를 조회하세요
SELECT * FROM DEPARTMENTS;

--사원 테이블에서 FIRST_NAME 이름, JOB_ID 직종, SALARY급여를 조회해보세요
SELECT FIRST_NAME, JOB_ID, SALARY FROM EMPLOYEES;

--컬럼에 실제 없는 정보도 출력가능
SELECT EMPLOYEE_ID, FIRST_NAME, JOB_ID, SALARY, COMMISSION_PCT, SALARY * COMMISSION_PCT
FROM EMPLOYEES;

--사원 테이블에서 급여가 10000이상은 사원들의 정보를 사번, 이름, 급여 순으로 출력
SELECT EMPLOYEE_ID, FIRST_NAME, SALARY
FROM EMPLOYEES WHERE SALARY >= 10000;

--사원 테이블에서 이름이 Michael인 사원의 사번, 이름을 조회
--문자열 데이터는 ''에 넣어서 표현
SELECT EMPLOYEE_ID, FIRST_NAME FROM EMPLOYEES
WHERE FIRST_NAME = 'Michael';

--사원 테이블에서 직종이 IT_PROG인 사원의 정보를 사번, 이름, 직종, 급여 순으로 조회
SELECT EMPLOYEE_ID, FIRST_NAME, JOB_ID, SALARY FROM EMPLOYEES
WHERE JOB_ID = 'IT_PROG';

-- 사원 테이블에서 급여가 10000이상 13000이하인 사원의 정보를 이름, 급여 순으로 조회하세요
SELECT FIRST_NAME, SALARY FROM EMPLOYEES
WHERE SALARY >= 10000 AND SALARY <= 13000;

-- 사원 테이블에서 입사일이 05년 9월 21일 이후에 입사한 사원의 정보를 사번, 이름, 입사일 순으로 출력
SELECT EMPLOYEE_ID, FIRST_NAME, HIRE_DATE FROM EMPLOYEES
WHERE HIRE_DATE >= '2005-09-21';

-- 사원테이블 2006년도에 입사한 사원들의 정보를 사번, 이름, 직종, 입사일 순으로 출력
SELECT EMPLOYEE_ID, FIRST_NAME, JOB_ID, HIRE_DATE FROM EMPLOYEES
WHERE HIRE_DATE >= '2006-01-01' AND HIRE_DATE < '2007-01-01';

--사원테이블에서 작종이 'SA_MAN'이거나 'IT_PROG'인 사원들의 모든 정보를 출력하세요
SELECT * FROM EMPLOYEES WHERE JOB_ID = 'SA_MAN' OR JOB_ID = 'IT_PROG';

--사원테이블에서 급여가 2200, 3200, 5000, 6000 받는 사원들의 정보를
--사번, 이름, 직종, 급여 순으로 조회
SELECT EMPLOYEE_ID, FIRST_NAME, JOB_ID, SALARY FROM EMPLOYEES
WHERE SALARY = 2200 OR SALARY = 3200 OR SALARY = 5000 OR SALARY = 6000;

SELECT EMPLOYEE_ID, FIRST_NAME, JOB_ID, HIRE_DATE FROM EMPLOYEES
WHERE HIRE_DATE BETWEEN '2006-01-01' AND '2006-12-31';

--IN(값, 값, 값)
SELECT EMPLOYEE_ID, FIRST_NAME, JOB_ID, SALARY FROM EMPLOYEES
WHERE SALARY IN(2200,3200,5000,6000);

--사원테이블에서 작종이 'SA_MAN'이거나 'IT_PROG'가 아닌 모든 사원의 정보 출력
SELECT * FROM EMPLOYEES WHERE JOB_ID NOT IN('SA_MAN', 'IT_PROG');

-- 사원 테이블에서 사원들의 이름중 M으로 시작하는 사원들의 정보를 사번, 이름, 직종 순으로 출력
SELECT EMPLOYEE_ID, FIRST_NAME, JOB_ID FROM EMPLOYEES
WHERE FIRST_NAME LIKE 'M%';

-- 사원 테이블에서 이름이 d로 끝나는 사원의 사번, 이름 직종을 출력
SELECT EMPLOYEE_ID, FIRST_NAME, JOB_ID FROM EMPLOYEES
WHERE FIRST_NAME LIKE '%d';

-- 사원 테이블에서 이름에 a가 포함되어있는 사원의 정보를 이름, 직종순으로 출력
SELECT FIRST_NAME, JOB_ID FROM EMPLOYEES
WHERE FIRST_NAME LIKE '%a%';

--이름의 첫글자가 M이면서 총 7글자의 이름을 가진 사원 정보를 사번, 이름 순으로 출력
SELECT EMPLOYEE_ID, FIRST_NAME FROM EMPLOYEES
WHERE FIRST_NAME LIKE 'M______';

--사원테이블에서 이름의 세번째글자에 a가 들어가는 사원들의 정보를 사번, 이름순으로 출력
--이름의 첫글자가 M이면서 총 7글자의 이름을 가진 사원 정보를 사번, 이름 순으로 출력
SELECT EMPLOYEE_ID, FIRST_NAME FROM EMPLOYEES
WHERE FIRST_NAME LIKE '__a%';

--이름에 소문자 o가 들어가면서 a로 끄타는 사원들의 정보를 이름, 급여 순으로 조회
SELECT FIRST_NAME, SALARY FROM EMPLOYEES
WHERE FIRST_NAME LIKE '%o%a';

--이름이 H로 시작하면서 6글자 이상인 사원들의 정보를 사번, 이름 순으로 조회
SELECT EMPLOYEE_ID, FIRST_NAME FROM EMPLOYEES
WHERE FIRST_NAME LIKE 'H_____%';

--사원 테이블에서 이름이 s가 들어있지 않은 사원들만 사번, 이름으로 검색
SELECT EMPLOYEE_ID, FIRST_NAME FROM EMPLOYEES
WHERE FIRST_NAME NOT LIKE '%s%';

SELECT EMPLOYEE_ID, FIRST_NAME FROM EMPLOYEES
WHERE FIRST_NAME LIKE '%el%' OR FIRST_NAME LIKE '%en%';

--언더바 자체를 조회하고 싶으면 이스케이프문자 '%\_%'
