package ex08_interface;
/*
 * 인터페이스
 * 모든 메서드가 추상메서드인 추상클래스를 '인터페이스'라고 부른다
 * 인터페이스는 추상메서드와 상수로만 이루어져 있으며, 추상클래스와 마찬가지로 스스로 객체를 생성할 수 없다.
 * 
 * 인터페이스의 선언
 * 인터페이스는 클래스가 아니다. 추상클래스는 자식클래스의 생성자를 통해 객체를 생성해낼수 있었다.
 * 하지만 인터페이스는 어떤 형태로도 객체를 만들수 없기 때문에 클래스라고 부를 수 없다.
 * 
 * [접근제한자] interface 인터페이스명{
 * 		상수
 * 		추상메서드
 * }
 * 인터페이스를 선언하는 방법은 클래스를 작성하는 방법과 동일하며 class 키워드 대신 interface를 작성
 * 또한 인터페이스의 추상메서드는 다른 클래스들과의 매개체 역할을 하므로 누구나 접근할 수 있다.
 * 따라서 항상 public으로 구현한다
 * 만약 접근자를 default로 구현했다면 자동으로 public으로 인식한다.
 * 
 * 인터페이스의 장점
 * 정보은닉 : 실제 구현 클래스의 내용을 전혀 보지 않고도 개발 코드로 객체를 구현화 할수 있음
 * 모듈화 : 구현 클래스들이 독립적으로 구현되고 사용되룻 있다. 개발 코드에서 객체변경이 필요할 때, 개발코드의 수정을 최소화 할수 있다.
 * 
 * 추상클래스와 인터페이스의 공통점
 * 정보은닉, 모듈화, 추상화 등은 추상클래스와 인터페이스가 공통적으로 가진 장점
 * 추상클래스와 인터페이스 모두 다형성을 구현할수 있는 기반을 제공하며, 추상메서드 구현에 대한 강제성을 반영하고 있다
 */

public interface Phone {
	//상수 - 값을 한번 넣어놓으면 대입이 불가능. 상수명은 대문자로 작성.
	public static final int MAX_BATTERY_CAPACITY = 100;
	
	//추상메서드
	void powerOn();
	void powerOff();
	boolean isOn();
	void watchUtube();
	void charge();
	
	//인터페이스도 마찬가지로 추상메서드가 비어있기 때문에 객체생성을 스스로 할수 없다.
	//따라서 인터페이스도 자신이 갖고있는 추상메서드를 구현해줄 클래스를 작성해야만 한다.
	//인터페이스를 구현해주는 클래스를 '구현클래스'라고 한다.
}
