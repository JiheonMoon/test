package ex05_abstract;
/*
 * 추상화
 * 공통성과 본질을 모아 추출하는것
 * 기존 클래스들의 공통적인 요소를 모아 상위클래스를 만들어내는 기술
 * 공통적인 속성과 행위를 모아 정의하면 반복적인 코드를 줄일 수 있고, 보다 효과적인 클래스간의 관계를 설정하여 유지보수가 용이해짐
 * 
 * 추상 메서드
 * 선언부만 작성하고 구현부는 작성하지 않고 남겨둔 미완성 메서드
 * 다형성을 위해 메서드의 선언은 통일해야 하지만, 실제로 구현하는 내용은 자식클래스마다 달라야 할때
 * 부모클래스의 메서드는 비워두고 자식클래스에서 오버라이딩하여 구현할수 있음
 * 추상메서드를 선언할때 abstract 키워드를 함께 표기해야함
 * 
 * 접근제한자 abstract 반환형 메서드명(매개변수);
 * abstract 접근제한자 반환형 메서드명(매개변수);
 * 
 * 추상 클래스
 * 추상메서드가 한개이상 정의되어 있는 클래스를 추상클래스라고함
 * 추상메서드를 포함하고 있다는 것을 제외하고 일반 클래스와 다르지 않음
 * 추상클래스에도 생성자가 있으며, 멤버변수와 메서드도 가질수있다.
 * 추상클래스 또한 abstract를 통해 자신이 추상클래스임을 명시해야함
 * 
 * public abstract class 클래스명{
 * 		필드
 * 		생성자
 * 		메서드(추상메서드)
 * }
 * 
 * 추상 클래스의 특징
 * 일반 클래스처럼 독립적으로 생성자를 호출해 객체를 생성할 수 없다.
 * 자식클래스의 생성자 super()를 통해 추상클래스의 생성자를 호출하여 부모객체를 생성한후 자식객체를 생성한다.
 * 
 * 추상클래스에 추상메서드는 언제 구현해야할까?
 * 자식클래스들이 반드시 구현해야 하는 메서드가 있다면, 추상메서드로 추상 클래스에 만들어준다 
 * 추상 클래스를 상속받은 모든 자식클래스는 반드시 추상메서드를 오버라이딩 및 재정의 하여 구현하여야 함
 */
public abstract class Receipt {
	
	//필드
	String chef;
	
	//생성자
	public Receipt(String chef) {
		this.chef = chef;
	}
	
	void info() {
		System.out.println("이 레시피는 " + chef + "님의 레시피 입니다.");
	}
}
