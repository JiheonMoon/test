NOT NULL과 DEFAULT의 차이점

EX) GENDER CHAR(1) DEFAULT 'W' NOT NULL;

QUERY 1
INSERT INTO TBL_STUDENT GENDER VALUES(NULL);

QUERY 2
INSERT INTO TBL_STUDENT GENDER VALUES();

쿼리1은 NULL이라는 특정한 값을 받았다고 생각하기 때문에, DEFAULT값이 안들어간다
쿼리2는 아무런 입력도 받지 않았다고 생각하기 때문에 DEFAULT값인 'W'가 설정된다.

1. NOT NULL만 선언한 경우
쿼리1의 경우 : NOT NULL이 동작함
쿼리2의 경우 : NOT NULL이 동작함

2.두개 다 선언한 경우
쿼리1의 경우 : DEFAULT가 동작하여 기본값이 들어감
쿼리2의 경우 : NOT NULL이 동작하여 오류남

무결성
- 데이터베이스에 저장된 값과 현실세계의 실제 값이 정확성을 의미
- 무결성 제약조건은 DB에 들어있는 데이터의 정확성을 보장하기 위해 부정확한 자료가
DB내에 저장되는 것을 방지하기위한 제약조건을 말함
- 데이터의 정확성, 일관성, 유효성이 유지되는것
- 일관된 데이터베이스 상태를 정의하는 규칙을 묵시적 또는 명시적으로 정의
- 정확성 : 중복이나 누락이 없는 상태
- 일관성 : 원인과 결과의 의미가 연속저긍로 보정되어 변하지 않는 상태
- 유효성 : 사용자로부터 값을 입력받을때 정확한 값만 입력되도록 할때 유효한 기능

1.개체무결성
- PK(기본키)로 선택된 컬럼은 고유한 값을 가져야 하며, NULL값을 허용하지 않는다.

2.참조무결성
- 외래키값은 NULL이거나 참조테이블의 기본키 값과 동일해야한다
- 즉, 테이블은 참조할수 없는 외래키 값을 가질 수 없다.

3.도메인 무결성
- 주어진 속성의 값들이 도메인에 속한 값이여야 한다는 규정
- 수강이라는 테이블에 '과목명'에 영어, 수학, 국어 세가지만 입력되도록 도메인을 가진 경우
- 반드시 도메인에 속한 값만 입력해야 한다.

4.사용자 정의 무결성
- 속성 값들이 사용자가 정의한 제약 조건에 만족해야 한다는 규정

모델링
- 정보 시스템 구축의 대상이 되는 업무 내용을 분석하여 이해하고,
약속된 표기법에 의해 표현하는 것을 의미함
- 분석된 모델을 가지고 실제 데이터베이스를 생성하여 개발 및 데이터 관리에 사용한다.
- 특히 데이터를 추상화한 데이터 모델은 데이터베이스의 골격을 이해하고,
그 이해를 바탕으로 SQL문장을 기능과 성능적인 측면에서 효율적으로 작성할수 있기 때문에
데이터 모델링은 데이터베이스 설계의 핵심과정이기도 하다

데이터 모델링의 특징
- 추상화 : 현실 세계를 일정한 형식에 맞춰 간략하게 표현해야 한다
- 단순화 : 누구나 쉽게 이해할수 있도록 제한된표기법이나 언어를 사용함
- 명확화 : 명확하게 의미가 해석되어야 하고, 한가지 의미만을 가져야한다.

1.요구사항 분석
- 고객과의 의사소통을 통해 고객의 업무 프로세스를 완벽하게 이해하고 그들의 요구사항을 구체적으로 뽑아내는 과정

2.개념적 데이터 모델링
- 내가 하고자 하는 일의 데이터간 관계를 구상하는 단계
- 각 객체들과 그들간의 관계를 발견하고 표현하기 위해 ERD(Entity-Realationship Diagram)를 생성함

3.논리적 데이터 모델링
- 개념적 데이터 모델이 완성되면, 구체화된 업무 중심의 데이터 모델을 만들어내야함
- 업무에 대한 제약조건, 속성, 관계등을 표시하며 정규화 활동을 수행한다
- 정규화는 데이터 모델의 일관성을 확보하고 중복을 제거하여 신뢰성있는 데이터 구조를 얻는 목적이 있다.

USER
U_ID(PK)	VARCHAR2(100)	
U_PW	VARCHAR2(100)	
U_NAME	VARCHAR2(200)	
U_ADDRESS VARCHAR2(300)	
U_EMAIL	VARCHAR2(300)		
U_BIRTH DATE	

ORDER			
O_NUM	NUMBER	
O_DATE	DATE	
U_ID(FK)	VARCHAR(100)	
P_NUM(FK) NUMBER
	

PRODUCT	
P_NUM(PK) NUMBER
P_NAME	VARCHAR2(100)
P_PRICE	NUMBER
P_COUNT NUMBER


조합키
- 두개 이상의 컬럼이 하나의 기본킬 작동하기 때문에 두개가 완전히 일치하는 데이터가 올수 없다
- 조합키 만드는법
CREATE TABLE TEST(
	COL1 VARCHAR2(30),
	COL2 NUMBER,
	CONSTRAINT TEST_PK PRIMARY KEY(COL1, COL2)
);

4. 물리적 데이터 모델링
- 최종적으로 데이터를 관리할 데이터베이스를 선택하고, 선택한 데이터베이스에 실제 테이블을 만드는 작업
- 시각적인 구조를 만들었으면 실제로 SQL코딩을 통해 완성하는 단계


관계

1:1 관계
어느 한쪽의 테이블에서 상대 테이블과 반드시 단 하나의 관계를 가지는 것
EX)국민
주민등록번호 PK
이름

여권정보
여권번호
주민등록번호

1:N 관계 1대 다 관계
한쪽 테이블이 관계를 맺은 쪽의 테이블에 여러 객체를 가질수 있는것
한명의 유저가 여러개의 물건을 주문할수 있다.

N:M 다대다 관계
관계를 맺고 있는 양쪽의 테이블 모두가 1:N관계를 가지는것

한 학원에는 여러명의 학생이 다닐수 있고
한명의 학생도 여러개의 학원을 다닐수 있다.

N:M 관계는 두 테이블의 기본키를 컬럼으로 갖는 또다른 테이블을 생성해서 관리함


1.요구 사항
꽃 테이블과 화분 테이블이 필요하다
꽃을 구매할 때 화분도 같이 구매한다


1.논리 모델링
-꽃 테이블
	-꽃 이름 PK
	-꽃 색깔
	-꽃 가격
-화분
	-제품번호 PK
	-화분색깔
	-화분모양
	-꽃 이름 FK

2.물리 모델링
FLOWER
F_NAME(PK) VARCHAR(100)
F_COLOR VARCHAR(100)
F_PRICE NUMBER

VASE
V_NUM(PK) NUMBER
V_COLOR VARCHAR(100)
V_SHAPE VARCHAR(100)
F_NAME(FK) VARCHAR(100)
3.테이블 모델링


-------------------
CD
CD_TITLE PK VARCHAR(200)
CD_PRICE NUMBER
CD_GENRE VARCHAR(100)
CD_TRACKLIST VARCHAR(300)
A_NAME FK VARCHAR(200)

ARTIST
A_NAME PK VARCHAR(200)
A_NATION VARCHAR(100)
A_YEAR NUMBER

TRACK
TRACK_TITLE PK VARCHAR(200)
TRACK_TIME TIMESTAMP
CD_TITLE FK VARCHAR(200)
--------------------------------
부서
부서ID
부서이름

직원
직원ID
직원이름
직책
부서ID

부양가족
가족 이름
가족 나이
직원 ID

근무기록
근무 기간
근무 직책
직원 ID


DEPARTMENT
D_ID NUMBER PK
D_NAME VARCHAR(200)

EMPLOYEE
EMPL_ID NUMBER PK
EMPL_NAME VARCHAR(200)
EMPL_POS VARCHAR(200)
D_ID NUMBER FK

FAMILY
F_NAME VARCHAR(200)
F_AGE NUMBER
EMPL_ID NUMBER FK

WORK_RECORD
W_PERIOD DATE
W_POSITION VARCHAR(200)
EMPL_ID NUMBER FK

---------------------------
DML(Data Manipulation Language) 데이터 조작어

1. SELECT 데이터의 조회
- 테이블에서 원하는 데이터를 조회할때 사용하는 키워드
SELECT 컬럼명1, 컬럼명2, 컬럼명3,.... FROM 테이블명;

SELECT 컬럼명1, 컬럼명2, 컬럼명3,.... FROM 테이블명
WHERE 조건식;

조건절
원하는 자료를 검색하기 위한 조건절
WHERE절에서는 결과를 제한하기 위한 조건을 기술할수도 있음
WHERE절은 조회하려는 데이터에 특정조건을 부여할 목적으로 사용하기 때문에 FROM절 뒤에 오게됨

WHERE절의 조건식은 다음과 같이 구성된다
- 컬럼명이 왼쪽
- 비교연산자 가운데 온다
>, <, >=, <=, '=',  "!=, <>, ^=" , AND, OR
- 문자 숫자 표현식(조건식의 우측)

조건식에서 NULL 사용하기
컬럼명 IS NULL
컬럼명 IS NOT NULL

SQL연산자
1.BETWEEN A와 B사이의 값을 조회
2.IN OR을 대신해 사용하는 연산자
3.LIKE 유사검색
WHERE 절에서 사용되며 부분적으로 일치하는 속성르 찾을때 사용된다
% 모든값
_ 하나의값

EX) 'M%': M으로 시작하는 모든 데이터
'%A' A로 끝나는 모든 데이터
'%A%' A를 포함하는 모든 데이터
'A_' A로 시작하는 두글자 짜리 데이터
'_A_' A를 두번째 글자로 갖는 세글자 짜리 데이터
'__A' A로 끝나는 세글자 짜리 데이터

2. INSERT 데이터의 추가
3. UPDATE 데이터의 수정
4. DELETE 데이터의 삭제