HTML,CSS,JS

웹페이지?
- 일종의 문서파일
- 웹페이지를 작성하는 도구는 HTML
- 웹페이지는 주로 원거리 통신을 통해 전달되는 경우가 많으며, 이 때 사용하는 방식을 HTTP라고 한다
- 웹페이지는 글자와 사진 뿐만 아니라 동영상, 음악 등 다양한 정보를 아름다운 형태로 제공
- 웹페이지들이 모여서 만들어진 덩어리를 웹사이트라고함

웹개발자의 업무

프론트엔드 개발자
- 사용자가 눈으로 직접 보며 사용하는 웹페이지를 개발하는 엔지니어이다
백엔드 개발자
- 데이터를 저장하거나 프론트엔드의 원활한 활동을 도와주기 위해 서버를 개발하는 엔지니어
- 바깥에서는 잘 보이지 않는 뒷단에서 작동하는 소프트웨어를 개발

마크업 언어란?
- 문서에 마크업을 추가하기 위해 사용하는 도구
- 언어라고 이름이 붙은 이유는 사람과 컴퓨터가 서로 대화하기 위해 사용하기 도구이기 때문
- 교과서나 참고서의 중요한 부분에 밑줄을 긋거나 혀오강펜으로 칠하는 등 문서를 꾸미는 행위
- 웹페이지도 마크업 언어로 작성된 문서

웹브라우저  검색엔진
크롬	   구글
웨일	   네이버
엣지	   야후
파이어폭스  다음
사파리	    빙
오페라
	   
개발의 기본은 협업

웹 프론트엔드 개발을 위한 기본기
- HTML을 통해 웹페이지의 뼈대를 제작해볼것이다
- 이후 CSS를 통해 HTML로 제작한 홈페이지에 디자인적 요소를 추가해
더욱 아름다운 웹페이지를 제작할수 있다
- 마지막으로 JS를 활용하면 웹페이지에 각양각색의 기능을 추가할수 있다
- 웹페이지가 역동적으로 움직이고 변화하며, 우리와 상호작용 할수 있는 건 JS덕분

실습환경 구축하기
1.Visual Studio Code 설치하기
마이크로소프트에서 제공하는 프로그램

2.개발을 도와주는 유용한 프로그램 설치하기
프레임워크
- 복잡한 문제를 해결하는데 사용하룻 있는 누군가 만들어둔 소프트웨어
- 영단어 그대로 번역하면 뼈대 또는 골조하는 단어이다

프레임워크를 사용해 문제를 해결하는 방법
- 구글검색을 통해 원하는 프레임워크를 찾아냈다면, 프레임워크의 사용설명서를 읽어보세요

깃허브 활용하기
- 작업중인 코드를 업로드하건, 다른 컴퓨터에서 다운받는 등의 작업을 도와주는 일종의 온라인 사무실과 같은 서비스
- 코드의 백업과 무료 웹 호스팅 이용을 위해 깃허브를 사용하자

git 설치하기

코드를 2일전 코드로 되돌리고 싶으면 어떻게 해야할까
1.코드를 매일매일 백업
2.버전관리 프로그램 사용

git 분산 버전 관리 시스템(Distributed Version Control System)
- 컴퓨터 파일의 변경사항을 추적하고 여러명의 사용자들 간에 파일에 대한 작업을 조율하는데 사용한다
- 주로 여러명의 개발자가 하나의 소프트웨어 개발 프로젝트에 참여할 때, 소스코드를 관리하는데 주로 사용한다.

버전관리는 왜 합 필요한가?
각자 본인이 맡은 파트의 ppt를 만들어서 합치는 과정이라고 가정
- 팀원이 많아질수록 각 파트별로 만든 파일을 본 파일에 합치는 과정이 복잡해진다.

git의 장점
인터넷이 연결되지 않은 곳에서도 개발을 진행할 수 있으며,
분산 버전 관리이기 때문에 중앙 저장소가 삭제되어도 원상복구 가능
각자의 개발자가 Branch에서 개발한 뒤, 본 프로그램에 합치는 merge 방식을 통한 병렬 개발 가능

git 기본 용어
- 동작과 이력을 효율적으로 처리하기 위해 저장공간을 논리적으로 분리
- 작업공간(working directory/ working tree)
- 임시공간(stage)
- 실질적으로 저장되고 기록되는 공간(repository)

Repository
- 저장소
- 히스토리, 태그, 소스의 가지치기 혹은 branch에 따라 버전을 저장
- 작업자가 변경한 모든 히스토리를 확인 가능

Working Tree
- 작업을 하는 공간
- 로컬 저장소에 접근하여 파일을 생성, 수정, 그리고 저장하는 공간
- Staging area에 맞닿아 있음
- 저장소의 어느 한 시점을 바라보는 작업자의 현재 시점

Staging Area
- 저장소에 저장하기 전 임시 저장하는 공간

COMMIT
현재 변경된 작업을 상태 점검을 마치고 확정적으로 저장소에 저장

HEAD
현재 작업중인 BRANCH

BRANCH
가지 혹은 분기점
- 작업을 할 때 현재상태를 복사하여 Branch에서 작을 한후 완전하다 싶을때 merge하여 작업
- 새로운 Branch는 마지막 commit한 상태를 가져옴

Merge
- 다른 Branch의 내용을 현재 Branch로 가져와 합치는 작업을 의미

git의 기본 명령어
1. git help
- 도움말 기능(가장 많이 사용하는 21개의 명령어 출력)
- 사용법이 궁금한 명령에 대해 'git help 명령어'를 통해 해당 명령어의 설정과 사용에 대한
도움말을 출력하는것도 가능

2. git init
- git 저장소를 초기화
- 저장소나 디렉토리 안에서 이 명령어를 실행하기 전까지는 그냥 일반 폴더이다
- 이 명령어를 입력해야 추가적인 git 명령어 입력가능

3. git status
- 저장소 상태 체크
- 어떤 파일이 저장소 안에 있는지, 커밋이 필요한 변경사항이 있는지,
현재 저장소의 어떤 Branch에서 작업하고 있는지 등 상태 정보를 출력

4. git branch
- 새로운 branch를 생성
- 여러 협업자와 작업할 시, 이 명령어로 새로운 브랜치를 만들고, 자신만의 변경사항과 파일 추가
및 커밋 타임라인을 생성, 완성후 협업자의 branch 혹은 main과 merge한다

5. git add
- staging 영역에 변경사항을 추가
- 다음 commit 전까지 변경분을 staging 영역에 보관하여 변동내역을 저장
git add 업로드 하고 싶은 파일 or 경로
git add . 현재 디렉토리의 모든 변경 내용을 staging에 등록
git add -A 작업 디렉토리의 모든 변경내용을 staging에 등록
git add -P 터미널에서 staging으로 넘길 파일 선택 가능

6. git commit
- staging에 있는 내용을 적용

git commit -m 메세지
커밋 메시지를 반영한 수정파일 묶음

git log
커밋내역 확인

git push
로컬 컴퓨터에서 서버로 변경사항을 보낸다

git pull
서버 저장소로부터 최신버전을 pull

git clone
서버저장소로 부터 최신버전을 다운로드

git checkout
작업하길 원하는 branch로 이동

git merge
개별 branch에서 마친 작업을 master branch로 이동

HTML
HyperText Markup Language의 약자
하이퍼텍스트는 종이에 인쇄된 텍스트 기술의 한계를 초월한 고차원적인 기술이라는 뜻
HTML은 웹페이지를 만드는 대표적인 마크업 언어
HTML은 웹페이지의 구조를 표현
HTML은 여러 요소로 구성이 되어있음

HTTP 통신을 통해 내용을 주고 받는다
HTTP는 한번 한번 내용을 주고 받으면 연결이 끊김





